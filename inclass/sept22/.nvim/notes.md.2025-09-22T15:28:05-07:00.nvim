#wait and waitpid
    - pid_t waitpid(pid_t pid, int *_Nullable wstatus, int options);
    - generally a parent waits until a child process process  finishes, before continuing
    - pointer to an int to store, tells the process where to get outputted information or the exit
      paramater ( -1)
    -
# WSTATUS
## (wstatus(): os a cp,[licated value
    - Normally exit() or main
    - if(WIFEXITED(wstatus)) {
        printf("Reason: d$". wstatus);
        }

# Zombies
    - what happens whne an a[[;icatopn terminates?
    - Os retains some state information of terminated processes, so a parant can find out reason for
      exiting, this takes up  some memory
    - calling wiat() on a terminated process frees this memory
    - a zombie is a process state where the child process has terminated but the parent process
      hasn't called 'wait()' yet
      - having many zombies uses kernel resourses so its important to always wait on child processes
# orphans
    - A process in which the child process is running but the parent process has terminated
    - Linux handles orphans by shoving them at their grandparents ( or maybe init)
    - init process calls wait on all child processes
# Errno
    - In c Functions that
